name: CD workflow

on:    
  pull_request:
    types:
      - opened
    branches: [ staging ]

env:
    ENDPOINT: products
    REPOSITORY_NAME: ${{ github.event.repository.name }}
    
jobs:               
    ci-tests:
        name: Scan Sonarcloud
        runs-on: ubuntu-latest
        
        steps:
          - uses: actions/checkout@v3
            with:
              fetch-depth: 0  
          - name: Set up JDK 11
            uses: actions/setup-java@v1
            with:
              java-version: 11 
          - name: Cache SonarCloud packages
            uses: actions/cache@v1
            with:
              path: ~/.sonar/cache
              key: ${{ runner.os }}-sonar
              restore-keys: ${{ runner.os }}-sonar
          - name: Cache Maven packages
            uses: actions/cache@v1
            with:
              path: ~/.m2
              key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
              restore-keys: ${{ runner.os }}-m2
          - name: Build and analyze
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            run: mvn verify sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=obligatoriodevops -Dsonar.projectKey=obligatorioDevOps_${{ env.REPOSITORY_NAME }}

          - name: Build and test project with Maven
            run: mvn -B package --file pom.xml
          
          - name: Login a Docker Hub  
            uses: docker/login-action@v1
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
        
          - name: Build and push a Docker Hub de ${{ env.REPOSITORY_NAME }}
            uses: docker/build-push-action@v3
            with:
              context: .
              push: true
              tags: ${{ secrets.DOCKER_REPO }}:latest                 
            
    cd-tests:
        name: Staging tests
        runs-on: ubuntu-latest
        needs: [ ci-tests ]
                   
        steps:                          
          - name: Staging tests
            id: cd_test_1
            run: echo newman
  
    automatic-merge:
      name: Automatic merge to staging
      runs-on: ubuntu-latest
      
      steps:
        - name: develop -> staging
          uses: "pascalgn/automerge-action@v0.15.3"          
          env:
            MERGE_LABELS: ""
            GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    post-tests:
      name: Post test actions
      runs-on: ubuntu-latest
      needs: [ cd-tests ]
      
      steps:
        - uses: actions/checkout@v2
        
        - id: cpr
          name: "Success - Create pull request"
          if: success()
          uses: peter-evans/create-pull-request@v4          
          with:
            base: main
            branch: staging            
            
        - name: "Success - Trigger Telegram alert"
          uses: appleboy/telegram-action@master
          if: success()
          with:
            to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
            token: ${{ secrets.TELEGRAM_TOKEN }}
            message: |
              ${{ github.actor }} / [ ${{ github.repository }} ]
              ✅ CD Pipeline succeed ✅
              
              Please, check PR at ${{ steps.cpr.outputs.pull-request-url }} to continue the workflow
              
        - name: "Failed - Trigger Telegram alert"
          uses: appleboy/telegram-action@master
          if: failure() || cancelled()
          with:
            to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
            token: ${{ secrets.TELEGRAM_TOKEN }}
            message: |
              ${{ github.actor }} / [ ${{ github.repository }} ]
              ❌ CD Pipeline failed ❌
              
              Please, check output at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              Please, check output at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
